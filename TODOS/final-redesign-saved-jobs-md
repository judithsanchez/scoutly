<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scoutly - Saved Jobs</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        html { scroll-behavior: smooth; }
        body {
            font-family: 'Inter', sans-serif;
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        :root {
            --page-bg: #f8fafc;
            --card-bg: #ffffff;
            --card-border: #e2e8f0;
            --text-primary: #0f172a;
            --text-secondary: #64748b;
            --tag-bg: #f1f5f9;
            --tag-text: #475569;
            --icon-color: #64748b;
        }
        .dark {
            --page-bg: #020617;
            --card-bg: #0f172a;
            --card-border: #1e293b;
            --text-primary: #f8fafc;
            --text-secondary: #94a3b8;
            --tag-bg: #1e293b;
            --tag-text: #94a3b8;
            --icon-color: #94a3b8;
        }
        body { background-color: var(--page-bg); color: var(--text-primary); }
        .card { background-color: var(--card-bg); border-color: var(--card-border); }
        .text-secondary { color: var(--text-secondary); }
        .tag { background-color: var(--tag-bg); color: var(--tag-text); }
        .icon { color: var(--icon-color); }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .fade-in {
            animation: fadeIn 0.5s ease-out forwards;
        }
        .dropdown-content { display: none; }
        .dropdown:hover .dropdown-content { display: block; }
        .modal-hidden { display: none; }
    </style>
</head>
<body class="antialiased">
    <div id="theme-toggle-container"></div>
    <main class="px-4 pb-24 pt-20 md:pt-24 max-w-4xl mx-auto">
        <h1 class="text-4xl font-extrabold tracking-tight mb-8 text-center">Saved Jobs</h1>
        <div id="job-list" class="space-y-6">
            <!-- Job cards will be dynamically inserted here -->
        </div>
    </main>
    <div id="modal-container"></div>

    <script>
        // --- Mock Data ---
        const savedJobs = [
            {
                id: 1,
                title: "Customer Success Manager - UK (EMEA Region)",
                company: "Hubstaff",
                match: 75,
                status: "Want to Apply",
                tags: ["Vitally", "HubSpot", "Slack"],
                aiEvaluation: {
                    goodFit: [
                        "The candidate's experience aligns well with the required SaaS customer success experience.",
                        "The candidate's preferences for remote work and flexible working hours align well with the job's description."
                    ],
                    pointsToConsider: [
                        "Job location is in the UK, but the candidate is in the Netherlands, creating a significant timezone difference.",
                        "This role requires a full-time commitment, which may not align with all candidate preferences."
                    ],
                    stretchGoals: ["Developing skills with Vitally, and HubSpot."],
                },
                link: "#"
            },
            {
                id: 2,
                title: "Full Stack Software Engineer II",
                company: "Booking.com",
                match: 75,
                status: "Pending Application",
                tags: ["Java", "Python", "JavaScript", "React"],
                aiEvaluation: {
                    goodFit: ["Strong alignment with the required tech stack.", "Experience in large-scale consumer-facing applications is a plus."],
                    pointsToConsider: ["The role is based in Amsterdam, relocation might be required."],
                    stretchGoals: ["Gaining expertise in performance optimization for high-traffic sites."],
                },
                link: "#"
            },
            {
                id: 3,
                title: "Backend/Fullstack Engineer",
                company: "Localyze",
                match: 70,
                status: "Applied",
                tags: ["Go", "Kubernetes", "gRPC"],
                aiEvaluation: {
                    goodFit: ["Experience with Go and microservices architecture is a strong match."],
                    pointsToConsider: ["Familiarity with the travel tech industry is preferred but not mandatory."],
                    stretchGoals: ["Leading a project to migrate a legacy service to a new gRPC-based architecture."],
                },
                link: "#"
            }
        ];

        // --- Application Status Configuration ---
        const applicationStatuses = [
            { name: "Want to Apply", icon: "Star" },
            { name: "Pending Application", icon: "Clock" },
            { name: "Applied", icon: "Send" },
            { name: "Interview Scheduled", icon: "Calendar" },
            { name: "Technical Assessment", icon: "Code" },
            { name: "Offer Received", icon: "Award" },
            { name: "Offer Accepted", icon: "CheckCircle2" },
            { name: "Offer Declined", icon: "XCircle" },
            { name: "Rejected", icon: "Archive" },
        ];

        // --- Theme Toggle Component ---
        const ThemeToggle = {
            render: (container) => {
                const button = document.createElement('button');
                button.className = "fixed top-6 right-6 z-50 p-2 rounded-full bg-[var(--card-bg)] text-[var(--text-secondary)] border border-[var(--card-border)] shadow-md hover:text-[var(--text-primary)] transition-colors";
                button.ariaLabel = "Toggle theme";
                button.onclick = () => {
                    const isDark = document.documentElement.classList.toggle('dark');
                    localStorage.setItem('theme', isDark ? 'dark' : 'light');
                    updateIcon();
                };
                container.appendChild(button);

                const updateIcon = () => {
                    const isDark = document.documentElement.classList.contains('dark');
                    button.innerHTML = `<i data-lucide="${isDark ? 'sun' : 'moon'}"></i>`;
                    lucide.createIcons();
                };

                const savedTheme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
                if (savedTheme === 'dark') {
                    document.documentElement.classList.add('dark');
                } else {
                    document.documentElement.classList.remove('dark');
                }
                updateIcon();
            }
        };

        ThemeToggle.render(document.getElementById('theme-toggle-container'));


        // --- AI Evaluation Modal Component ---
        const AIEvaluationModal = {
            render: (job) => {
                const modalContainer = document.getElementById('modal-container');
                modalContainer.innerHTML = `
                    <div id="ai-modal" class="fixed inset-0 bg-black/80 z-50 flex justify-center items-center p-4">
                        <div class="card rounded-2xl p-6 max-w-lg w-full shadow-2xl fade-in">
                            <div class="flex justify-between items-center mb-4">
                                <h3 class="text-lg font-bold">AI Evaluation: ${job.title}</h3>
                                <button id="close-modal" class="text-secondary hover:text-[var(--text-primary)]"><i data-lucide="x"></i></button>
                            </div>
                            <div class="space-y-4 text-sm">
                                <div>
                                    <h4 class="font-semibold flex items-center gap-2 mb-2 text-green-500"><i data-lucide="check-circle-2" class="w-5 h-5"></i>Good Fit Reasons</h4>
                                    <ul class="list-disc list-inside text-secondary space-y-1">${job.aiEvaluation.goodFit.map(reason => `<li>${reason}</li>`).join('')}</ul>
                                </div>
                                <div>
                                    <h4 class="font-semibold flex items-center gap-2 mb-2 text-yellow-500"><i data-lucide="alert-triangle" class="w-5 h-5"></i>Points to Consider</h4>
                                    <ul class="list-disc list-inside text-secondary space-y-1">${job.aiEvaluation.pointsToConsider.map(point => `<li>${point}</li>`).join('')}</ul>
                                </div>
                                <div>
                                    <h4 class="font-semibold flex items-center gap-2 mb-2 text-blue-500"><i data-lucide="goal" class="w-5 h-5"></i>Stretch Goals</h4>
                                    <ul class="list-disc list-inside text-secondary space-y-1">${job.aiEvaluation.stretchGoals.map(goal => `<li>${goal}</li>`).join('')}</ul>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                lucide.createIcons();
                document.getElementById('close-modal').onclick = () => modalContainer.innerHTML = '';
            }
        };

        // --- Saved Job Card Component ---
        const createJobCard = (job, index) => {
            const card = document.createElement('div');
            // FIX: Add 'relative' class to establish a stacking context.
            card.className = "card rounded-2xl p-5 fade-in relative"; 
            card.style.animationDelay = `${0.1 * (index + 1)}s`;

            const currentStatus = applicationStatuses.find(s => s.name === job.status) || applicationStatuses[0];

            card.innerHTML = `
                <div class="flex flex-col sm:flex-row justify-between items-start gap-4">
                    <div class="flex-grow">
                        <h2 class="text-xl font-bold">${job.title}</h2>
                        <p class="text-secondary mb-3">${job.company}</p>
                        <div class="flex flex-wrap gap-2">
                            ${job.tags.map(tag => `<span class="tag text-xs font-medium px-2.5 py-1 rounded-full">${tag}</span>`).join('')}
                        </div>
                    </div>
                    <div class="flex sm:flex-col items-end gap-4 sm:gap-2 w-full sm:w-auto mt-4 sm:mt-0">
                        <div class="flex-grow flex items-center justify-end text-right">
                            <span class="text-2xl font-bold text-green-500">${job.match}%</span>
                            <span class="text-sm text-muted ml-1">Match</span>
                        </div>
                        <div class="relative dropdown">
                            <button class="status-button w-full sm:w-auto flex items-center justify-center gap-2 px-3 py-2 text-xs font-semibold rounded-lg border border-[var(--card-border)] hover:bg-[var(--tag-bg)] transition-colors">
                                <i data-lucide="${currentStatus.icon}" class="w-4 h-4"></i>
                                ${currentStatus.name}
                                <i data-lucide="chevron-down" class="w-4 h-4"></i>
                            </button>
                            <div class="dropdown-content absolute right-0 mt-2 w-56 card rounded-xl shadow-lg border z-20">
                                ${applicationStatuses.map(status => `
                                    <a href="#" class="status-option flex items-center gap-3 px-4 py-2 text-sm hover:bg-[var(--tag-bg)]" data-job-id="${job.id}" data-status="${status.name}">
                                        <i data-lucide="${status.icon}" class="w-4 h-4 text-secondary"></i>
                                        <span>${status.name}</span>
                                    </a>
                                `).join('')}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="border-t border-[var(--card-border)] mt-4 pt-4 flex justify-between items-center">
                    <button class="ai-eval-button text-sm font-semibold text-purple-600 dark:text-purple-400 hover:underline flex items-center gap-1.5" data-job-id="${job.id}">
                       <i data-lucide="brain-circuit" class="w-4 h-4"></i> Show AI Evaluation
                    </button>
                    <a href="${job.link}" target="_blank" class="text-sm font-semibold text-secondary hover:text-[var(--text-primary)] flex items-center gap-1.5">
                        View Job <i data-lucide="arrow-up-right" class="w-4 h-4"></i>
                    </a>
                </div>
            `;

            // FIX: Add event listeners to manage z-index on hover, ensuring dropdown appears on top.
            const dropdown = card.querySelector('.dropdown');
            dropdown.addEventListener('mouseenter', () => {
                card.style.zIndex = '50';
            });
            dropdown.addEventListener('mouseleave', () => {
                card.style.zIndex = 'auto';
            });

            card.querySelector('.ai-eval-button').onclick = (e) => {
                e.preventDefault();
                AIEvaluationModal.render(job);
            };

            card.querySelectorAll('.status-option').forEach(option => {
                option.onclick = (e) => {
                    e.preventDefault();
                    const selectedStatus = e.currentTarget.dataset.status;
                    job.status = selectedStatus;
                    renderJobs(); // Re-render to update the status text and icon
                };
            });

            return card;
        };
        
        // --- Render function ---
        const renderJobs = () => {
            const jobList = document.getElementById('job-list');
            jobList.innerHTML = '';
            savedJobs.forEach((job, index) => {
                jobList.appendChild(createJobCard(job, index));
            });
            lucide.createIcons();
        };

        renderJobs();
    </script>
</body>
</html>
